package tdp.bikum.newtube.utils;

import android.util.Log;

import com.google.api.client.http.javanet.NetHttpTransport; // ‚ö†Ô∏è Import NetHttpTransport instead of GoogleNetHttpTransport for direct use
import com.google.api.client.json.gson.GsonFactory;
import com.google.api.services.youtube.YouTube;
import com.google.api.services.youtube.model.Video;
import com.google.api.services.youtube.model.VideoListResponse;
import com.google.api.services.youtube.model.VideoLiveStreamingDetails;

import java.util.ArrayList;
import java.util.List;

public class YouTubeStreamFetcher {

    private static final String TAG = "YouTubeStreamFetcher";
    private static final String YOUTUBE_API_KEY = "AIzaSyA469Dluw3YF0yA2iixnPz__eDtdFsfZCQ"; // üî¥ Thay b·∫±ng API Key th·∫≠t (ƒê√É X√ÅC NH·∫¨N L√Ä API KEY TH·∫¨T C·ª¶A B·∫†N)

    public interface StreamUrlCallback {
        void onStreamUrlsReceived(List<String> streamUrls);
        void onStreamUrlFetchFailed(String errorMessage);
    }

    public static void getYouTubeStreamUrlsAsync(String videoId, StreamUrlCallback callback) {
        new Thread(() -> {
            List<String> streamUrls = getYouTubeStreamUrls(videoId);
            if (streamUrls != null && !streamUrls.isEmpty()) {
                callback.onStreamUrlsReceived(streamUrls);
            } else {
                callback.onStreamUrlFetchFailed("‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y link stream t·ª´ YouTube API");
            }
        }).start();
    }

    private static List<String> getYouTubeStreamUrls(String videoId) {
        try {
            // ‚ö†Ô∏è S·ª¨A ƒê·ªîI QUAN TR·ªåNG: S·ª≠ d·ª•ng NetHttpTransport() thay v√¨ GoogleNetHttpTransport.newTrustedTransport()
            NetHttpTransport HTTP_TRANSPORT = new NetHttpTransport();
            GsonFactory JSON_FACTORY = GsonFactory.getDefaultInstance();

            YouTube youtubeService = new YouTube.Builder(HTTP_TRANSPORT, JSON_FACTORY, request -> {
                // Kh√¥ng c·∫ßn init g√¨ ƒë·∫∑c bi·ªát cho API key
            }).setApplicationName("NewTube-App").build();

            // üîπ Ch·ªâ c·∫ßn l·∫•y "liveStreamingDetails"
            YouTube.Videos.List request = youtubeService.videos().list("liveStreamingDetails");
            request.setId(videoId);
            request.setKey(YOUTUBE_API_KEY);

            // ‚ö†Ô∏è TH√äM LOG DEBUG NGAY TR∆Ø·ªöC G·ªåI API REQUEST
            Log.d(TAG, "‚û°Ô∏è G·ªçi YouTube API request...");

            VideoListResponse response = request.execute();

            // ‚ö†Ô∏è TH√äM LOG DEBUG NGAY SAU G·ªåI API RESPONSE
            Log.d(TAG, "‚¨ÖÔ∏è ƒê√£ nh·∫≠n YouTube API response.");

            // ‚ö†Ô∏è TH√äM LOG RESPONSE OBJECTS ƒê·ªÇ DEBUG N·ªòI DUNG RESPONSE
            Log.d(TAG, "Response Object: " + response); // Log to√†n b·ªô response object
            List<Video> videoList = response.getItems();
            Log.d(TAG, "Video List: " + videoList); // Log videoList
            if (videoList != null && !videoList.isEmpty()) {
                Video video = videoList.get(0);
                Log.d(TAG, "Video Item: " + video); // Log video item
                VideoLiveStreamingDetails liveDetails = video.getLiveStreamingDetails();
                Log.d(TAG, "Live Streaming Details: " + liveDetails); // Log liveDetails

                if (liveDetails != null) {
                    List<String> streamUrls = new ArrayList<>();
                    // ‚ö†Ô∏è S·ª¨A ƒê·ªîI: Ki·ªÉm tra containsKey thay v√¨ get() != null
                    // Ki·ªÉm tra v√† th√™m HLS URL n·∫øu c√≥
                    if (liveDetails.containsKey("hlsManifestUrl")) {
                        streamUrls.add((String) liveDetails.get("hlsManifestUrl")); // üîπ URL HLS stream
                    }
                    // Ki·ªÉm tra v√† th√™m DASH URL n·∫øu c√≥
                    if (liveDetails.containsKey("dashManifestUrl")) {
                        streamUrls.add((String) liveDetails.get("dashManifestUrl")); // üîπ URL DASH stream
                    }

                    if (!streamUrls.isEmpty()) { // ‚úÖ Ki·ªÉm tra xem c√≥ stream URLs n√†o ƒë∆∞·ª£c tr√≠ch xu·∫•t kh√¥ng
                        return streamUrls; // ‚úÖ TR·∫¢ V·ªÄ streamUrls N·∫æU C√ì
                    } else {
                        Log.w(TAG, "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y HLS ho·∫∑c DASH stream URLs trong liveStreamingDetails."); // Log c·∫£nh b√°o
                        return null; // Tr·∫£ v·ªÅ null n·∫øu kh√¥ng c√≥ stream URLs
                    }

                }
            }

        } catch (Exception e) {
            Log.e(TAG, "‚ùå L·ªói khi l·∫•y link stream t·ª´ YouTube API", e);
            Log.e(TAG, "YouTube API Response (Debug):", e);

            // ‚ö†Ô∏è TH√äM LOG TO√ÄN B·ªò RESPONSE (D·∫†NG JSON STRING) - CH·ªà LOG KHI C√ì EXCEPTION
            if (e instanceof com.google.api.client.googleapis.json.GoogleJsonResponseException) {
                com.google.api.client.googleapis.json.GoogleJsonResponseException jsonException = (com.google.api.client.googleapis.json.GoogleJsonResponseException) e;
                try {
                    Log.e(TAG, "YouTube API Full Response (JSON): " + jsonException.getDetails().toPrettyString()); // Log JSON response
                } catch (Exception ex) {
                    Log.e(TAG, "‚ùå L·ªói khi log JSON response", ex); // Handle exception during JSON logging
                }
            }
            return null;
        }
        Log.w(TAG, "‚ö†Ô∏è Kh√¥ng c√≥ liveStreamingDetails trong response t·ª´ YouTube API."); // Log c·∫£nh b√°o n·∫øu kh√¥ng c√≥ liveStreamingDetails
        return null; // Tr·∫£ v·ªÅ null n·∫øu kh√¥ng c√≥ liveStreamingDetails
    }
}